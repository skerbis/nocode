<?php
$templates = \KLXM\nocode\Template::getRegisteredTemplates();
$yformMapper = new \KLXM\nocode\YFormMapper();

// Verfügbare Layouts aus den Templates ermitteln
$template_choices = [];
foreach ($templates as $key => $template) {
    $template_choices[$key] = $key; // TODO: Hier später schönere Namen verwenden
}

// Ausgabemenge Optionen
$output_amounts = [
    'single' => 'Einzelner Eintrag',
    'limited' => 'Bestimmte Anzahl',
    'all' => 'Alle Einträge'
];

// Alle yform Tabellen laden
$yform_tables = rex_yform_manager_table::getAll();

// Gespeicherte Mappings
$savedMappings = "REX_VALUE[6]" != '' ? json_decode("REX_VALUE[6]", true) : [];
$savedOptions = "REX_VALUE[7]" != '' ? json_decode("REX_VALUE[7]", true) : [];
?>

<div class="rex-form">
    <!-- Template Auswahl -->
    <div class="form-group">
        <label>Template auswählen</label>
        <select name="REX_INPUT_VALUE[1]" class="form-control" id="template-select">
            <option value="">Bitte wählen...</option>
            <?php foreach ($template_choices as $key => $label): ?>
                <option value="<?= $key ?>" <?= "REX_VALUE[1]" == $key ? 'selected' : '' ?>>
                    <?= $label ?>
                </option>
            <?php endforeach; ?>
        </select>
    </div>

    <!-- Inhaltsquelle -->
    <div class="form-group">
        <label>Inhaltsquelle</label>
        <select name="REX_INPUT_VALUE[2]" class="form-control" id="content-source">
            <option value="manual" <?= "REX_VALUE[2]" == 'manual' ? 'selected' : '' ?>>Manueller Inhalt</option>
            <option value="yform" <?= "REX_VALUE[2]" == 'yform' ? 'selected' : '' ?>>YForm Tabelle</option>
        </select>
    </div>

    <!-- YForm Content -->
    <div id="yform-content" class="content-section">
        <!-- Tabellen Auswahl -->
        <div class="form-group">
            <label>YForm Tabelle auswählen</label>
            <select name="REX_INPUT_VALUE[3]" class="form-control" id="yform-table">
                <option value="">Bitte wählen...</option>
                <?php foreach ($yform_tables as $table): ?>
                    <option value="<?= $table->getTableName() ?>" 
                            <?= "REX_VALUE[3]" == $table->getTableName() ? 'selected' : '' ?>>
                        <?= $table->getTableName() ?>
                    </option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- Ausgabemenge -->
        <div class="form-group">
            <label>Anzahl der Ausgaben</label>
            <select name="REX_INPUT_VALUE[4]" class="form-control" id="output-amount">
                <?php foreach ($output_amounts as $key => $label): ?>
                    <option value="<?= $key ?>" <?= "REX_VALUE[4]" == $key ? 'selected' : '' ?>>
                        <?= $label ?>
                    </option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- Anzahl bei limitierter Ausgabe -->
        <div class="form-group" id="limit-amount" style="display: none;">
            <label>Anzahl der Einträge</label>
            <input type="number" name="REX_INPUT_VALUE[5]" value="REX_VALUE[5]" class="form-control" min="1">
        </div>

        <!-- Feld-Mapping Container -->
        <div id="field-mapping">
            <input type="hidden" name="REX_INPUT_VALUE[6]" id="field-mapping-data" value="REX_VALUE[6]">
        </div>
    </div>

    <!-- Template Options Container -->
    <div id="template-options">
        <input type="hidden" name="REX_INPUT_VALUE[7]" id="template-options-data" value="REX_VALUE[7]">
    </div>
</div>

<script>
$(document).on('rex:ready', function() {
    const $contentSource = $('#content-source');
    const $yformContent = $('#yform-content');
    const $yformTable = $('#yform-table');
    const $templateSelect = $('#template-select');
    const $outputAmount = $('#output-amount');
    const $limitAmount = $('#limit-amount');
    const $fieldMapping = $('#field-mapping');
    const $templateOptions = $('#template-options');
    const $fieldMappingData = $('#field-mapping-data');
    const $templateOptionsData = $('#template-options-data');
    
    // Gespeicherte Daten
    let savedMappings = {};
    let savedOptions = {};
    try {
        savedMappings = JSON.parse($fieldMappingData.val() || '{}');
        savedOptions = JSON.parse($templateOptionsData.val() || '{}');
    } catch (e) {
        console.error('Error parsing saved data:', e);
    }
    
    // Initial state
    toggleContentSections();
    toggleLimitAmount();
    
    // Event handlers
    $contentSource.on('change', toggleContentSections);
    $outputAmount.on('change', toggleLimitAmount);
    $yformTable.on('change', loadYformFields);
    $templateSelect.on('change', loadTemplateFields);
    
    // Load initial state if values are set
    if ($yformTable.val() && $templateSelect.val()) {
        loadYformFields();
        loadTemplateFields();
    }
    
    function toggleContentSections() {
        if ($contentSource.val() === 'yform') {
            $yformContent.show();
        } else {
            $yformContent.hide();
        }
    }
    
    function toggleLimitAmount() {
        if ($outputAmount.val() === 'limited') {
            $limitAmount.show();
        } else {
            $limitAmount.hide();
        }
    }
    
    function loadYformFields() {
        const table = $yformTable.val();
        if (!table) return;
        
        $.ajax({
            url: window.location.href,
            type: 'POST',
            data: {
                'rex-api-call': 'nocode_get_fields',
                table: table
            },
            success: function(response) {
                if (response.success) {
                    updateFieldMapping($templateSelect.val(), response.data.fields);
                }
            }
        });
    }
    
    function loadTemplateFields() {
        const template = $templateSelect.val();
        if (!template) return;
        
        $.ajax({
            url: window.location.href,
            type: 'POST',
            data: {
                'rex-api-call': 'nocode_get_template',
                template: template
            },
            success: function(response) {
                if (response.success) {
                    if ($yformTable.val()) {
                        loadYformFields();
                    }
                    updateTemplateOptions(response.data.options);
                }
            }
        });
    }
    
    function updateFieldMapping(templateName, yformFields) {
        if (!templateName) return;
        
        $.ajax({
            url: window.location.href,
            type: 'POST',
            data: {
                'rex-api-call': 'nocode_get_template',
                template: templateName
            },
            success: function(response) {
                if (!response.success) return;
                
                const templateFields = response.data.fields;
                let html = '<div class="field-mapping-container">';
                html += '<h3 class="field-mapping-title">Feld-Zuordnung</h3>';
                
                for (const [fieldName, field] of Object.entries(templateFields)) {
                    html += `
                        <div class="form-group">
                            <label>${fieldName}${field.required ? ' *' : ''}</label>
                            <select class="form-control field-mapping-select" 
                                    data-field="${fieldName}">
                                <option value="">Bitte wählen...</option>
                    `;
                    
                    for (const [yformFieldName, yformField] of Object.entries(yformFields)) {
                        const selected = savedMappings[fieldName] === yformFieldName ? 'selected' : '';
                        html += `
                            <option value="${yformFieldName}" ${selected}>
                                ${yformField.label} [${yformField.type}]
                            </option>
                        `;
                    }
                    
                    html += '</select></div>';
                }
                
                html += '</div>';
                $fieldMapping.html(html);
                
                // Event Handler für Mapping-Änderungen
                $('.field-mapping-select').on('change', function() {
                    const mappings = {};
                    $('.field-mapping-select').each(function() {
                        const field = $(this).data('field');
                        const value = $(this).val();
                        if (value) {
                            mappings[field] = value;
                        }
                    });
                    $fieldMappingData.val(JSON.stringify(mappings));
                });
            }
        });
    }
    
    function updateTemplateOptions(options) {
        if (!options || Object.keys(options).length === 0) {
            $templateOptions.html('');
            return;
        }
        
        let html = '<div class="template-options-container">';
        html += '<h3 class="template-options-title">Template-Optionen</h3>';
        
        for (const [optionName, option] of Object.entries(options)) {
            html += `
                <div class="form-group">
                    <label>${optionName}</label>
            `;
            
            if (option.type === 'select') {
                html += `
                    <select class="form-control template-option" data-option="${optionName}">
                `;
                for (const value of option.options) {
                    const selected = savedOptions[optionName] === value ? 'selected' : '';
                    html += `<option value="${value}" ${selected}>${value}</option>`;
                }
                html += '</select>';
            } else if (option.type === 'boolean') {
                const checked = savedOptions[optionName] ? 'checked' : '';
                html += `
                    <input type="checkbox" class="template-option" 
                           data-option="${optionName}" ${checked}>
                `;
            }
            
            html += '</div>';
        }
        
        html += '</div>';
        $templateOptions.html(html);
        
        // Event Handler für Options-Änderungen
        $('.template-option').on('change', function() {
            const options = {};
            $('.template-option').each(function() {
                const option = $(this).data('option');
                const value = $(this).is(':checkbox') ? $(this).is(':checked') : $(this).val();
                options[option] = value;
            });
            $templateOptionsData.val(JSON.stringify(options));
        });
    }
});
</script>

<style>
.rex-form {
    max-width: 800px;
    margin: 20px auto;
    padding: 25px;
}

.form-group {
    margin-bottom: 20px;
}

.content-section {
    padding: 15px;
    margin-top: 15px;
    border-radius: 4px;
    background: #f8f9fa;
}

#yform-content {
    border-left: 3px solid #4299e1;
}

.field-mapping-title,
.template-options-title {
    font-size: 1.1em;
    margin: 20px 0 15px;
    padding-bottom: 8px;
    border-bottom: 1px solid #dee2e6;
}

.field-mapping-container,
.template-options-container {
    background: #fff;
    padding: 15px;
    border-radius: 4px;
    margin-top: 15px;
}
</style>
